{"version":3,"file":"index.production.js","sources":["../../src/index.tsx"],"sourcesContent":["import {\n  Route,\n  parsePathname,\n  PartialGenerics,\n  DefaultGenerics,\n} from '@tanstack/react-location'\n\nexport function rankRoutes<TGenerics extends PartialGenerics = DefaultGenerics>(\n  routes: Route<TGenerics>[],\n): Route<TGenerics>[] {\n  return [...routes]\n    .map((d, i) => {\n      return { ...d, index: i }\n    })\n    .sort((a, b) => {\n      if (a.search || b.search) {\n        if (!b.search) {\n          return -1\n        }\n        if (!a.search) {\n          return 1\n        }\n      }\n\n      const aSegments = parsePathname(a.path)\n      const bSegments = parsePathname(b.path)\n\n      // Multi-sort by each segment\n      for (let i = 0; i < aSegments.length; i++) {\n        const aSegment = aSegments[i]\n        const bSegment = bSegments[i]\n\n        if (aSegment && bSegment) {\n          let sort: -1 | 1 | 0 = 0\n          ;(\n            [\n              {\n                key: 'value',\n                value: '*',\n              },\n              {\n                key: 'value',\n                value: '/',\n              },\n              {\n                key: 'type',\n                value: 'param',\n              },\n            ] as const\n          ).some((condition) => {\n            if (\n              [aSegment[condition.key], bSegment[condition.key]].includes(\n                condition.value,\n              ) &&\n              aSegment[condition.key] !== bSegment[condition.key]\n            ) {\n              sort = aSegment[condition.key] === condition.value ? 1 : -1\n              return true\n            }\n\n            return false\n          })\n\n          if (sort !== 0) {\n            return sort\n          }\n        } else {\n          // Then shorter segments last\n          return aSegment ? -1 : 1\n        }\n      }\n\n      // Keep things stable by route index\n      return a.index - b.index\n    })\n}\n"],"names":["routes","map","d","i","index","sort","a","b","search","aSegments","parsePathname","path","bSegments","aSegment","bSegment","key","value","some","condition","includes","length"],"mappings":";;;;;;;;;;6iBAOO,SACLA,SAEO,UAAIA,GACRC,KAAI,SAACC,EAAGC,eACKD,GAAGE,MAAOD,OAEvBE,MAAK,SAACC,EAAGC,MACJD,EAAEE,QAAUD,EAAEC,OAAQ,KACnBD,EAAEC,cACG,MAELF,EAAEE,cACE,UAILC,EAAYC,gBAAcJ,EAAEK,MAC5BC,EAAYF,gBAAcH,EAAEI,iBAGzBR,OACDU,EAAWJ,EAAUN,GACrBW,EAAWF,EAAUT,OAEvBU,IAAYC,WAoCPD,GAAY,EAAI,OAnCnBR,EAAmB,SAGnB,CACEU,IAAK,QACLC,MAAO,KAET,CACED,IAAK,QACLC,MAAO,KAET,CACED,IAAK,OACLC,MAAO,UAGXC,MAAK,SAACC,YAEJ,CAACL,EAASK,EAAUH,KAAMD,EAASI,EAAUH,MAAMI,SACjDD,EAAUF,QAEZH,EAASK,EAAUH,OAASD,EAASI,EAAUH,QAE/CV,EAAOQ,EAASK,EAAUH,OAASG,EAAUF,MAAQ,GAAK,GACnD,MAME,IAATX,KACKA,WApCJF,EAAI,EAAGA,EAAIM,EAAUW,OAAQjB,IAAK,SAAlCA,2CA6CFG,EAAEF,MAAQG,EAAEH"}