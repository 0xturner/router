{"version":3,"file":"index.production.js","sources":["../../src/index.tsx"],"sourcesContent":["import * as React from 'react'\nimport {\n  Route as RouteType,\n  PartialGenerics,\n  DefaultGenerics,\n} from '@tanstack/react-location'\n\nexport function Route<TGenerics extends PartialGenerics = DefaultGenerics>(\n  _props: Omit<RouteType<TGenerics>, 'children'> & {\n    children?: React.ReactNode\n  },\n) {\n  return null\n}\n\nexport function elementsToRoutes<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n>(children: React.ReactNode): RouteType<TGenerics>[] {\n  let routes: RouteType<TGenerics>[] = []\n\n  React.Children.forEach(children, (element) => {\n    if (!React.isValidElement(element)) return\n\n    if (element.type === React.Fragment) {\n      routes.push(...elementsToRoutes<TGenerics>(element.props.children))\n      return\n    }\n\n    if (!element.type === (Route as any)) {\n      if (process.env.node_env !== 'production') {\n        console.warn(\n          'elementsToRoutes only supports <Route> and <React.Fragment> elements.',\n        )\n      }\n      throw new Error()\n    }\n\n    let route: RouteType<TGenerics> = { ...element.props }\n\n    if (element.props.children) {\n      route.children = elementsToRoutes(element.props.children)\n    }\n\n    routes.push(route)\n  })\n\n  return routes\n}\n"],"names":["Route","_props","elementsToRoutes","children","routes","React","Children","forEach","element","isValidElement","type","Fragment","process","env","node_env","console","warn","Error","route","props","push"],"mappings":";;;;;;;;;;kyBAOO,SAASA,EACdC,UAIO,kCAGF,SAASC,EAEdC,OACIC,EAAiC,UAErCC,EAAMC,SAASC,QAAQJ,GAAU,SAACK,MAC3BH,EAAMI,eAAeD,MAEtBA,EAAQE,OAASL,EAAMM,cAKtBH,EAAQE,OAAUV,OACQ,eAAzBY,QAAQC,IAAIC,UACdC,QAAQC,KACN,yEAGE,IAAIC,UAGRC,OAAmCV,EAAQW,OAE3CX,EAAQW,MAAMhB,WAChBe,EAAMf,SAAWD,EAAiBM,EAAQW,MAAMhB,WAGlDC,EAAOgB,KAAKF,QAnBVd,EAAOgB,WAAPhB,EAAeF,EAA4BM,EAAQW,MAAMhB,cAsBtDC"}