{"version":3,"file":"index.production.js","sources":["../../src/index.tsx"],"sourcesContent":["import {\n  LoaderFn,\n  RouteMatch,\n  PartialGenerics,\n  DefaultGenerics,\n} from '@tanstack/react-location'\n\nexport type FetchPolicy = 'cache-and-network' | 'cache-first' | 'network-only'\n\nexport type SimpleCacheRecord<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n> = {\n  key: string\n  updatedAt: number\n  ready: boolean\n  data?: any\n  invalid?: boolean\n  match: RouteMatch<TGenerics>\n}\n\nexport type SimpleCacheRecords<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n> = Record<string, SimpleCacheRecord<TGenerics>>\n\n//\n\nexport class ReactLocationSimpleCache<\n  TDefualtGenerics extends PartialGenerics = DefaultGenerics,\n> {\n  records: SimpleCacheRecords<any> = {}\n\n  constructor() {}\n\n  createLoader<TGenerics extends TDefualtGenerics = TDefualtGenerics>(\n    loader: LoaderFn<TGenerics>,\n    opts?: {\n      key?: (match: RouteMatch<TGenerics>) => string\n      maxAge?: number\n      policy?: FetchPolicy\n    },\n  ): LoaderFn<TGenerics> {\n    const maxAge = opts?.maxAge ?? 0\n    const policy = opts?.policy ?? 'cache-and-network'\n\n    const cachedLoader: LoaderFn<TGenerics> = async (match, loaderOptions) => {\n      // Cache on pathname\n      const key = opts?.key ? opts.key(match) : match.pathname\n\n      // No cache? Create it.\n      if (!this.records[key]) {\n        this.records[key] = {\n          key,\n          updatedAt: 0,\n          ready: false,\n          match,\n        }\n      }\n\n      const entry = this.records[key]!\n\n      Object.assign(entry, {\n        match,\n        loaderOptions,\n      })\n\n      const doFetch = async () => {\n        loaderOptions.dispatch({ type: 'loading' })\n        try {\n          const data = await loader(match, loaderOptions)\n          entry.updatedAt = Date.now()\n          entry.ready = true\n          entry.data = data\n          loaderOptions.dispatch({ type: 'resolve', data })\n          return data\n        } catch (err) {\n          loaderOptions.dispatch({ type: 'reject', error: err })\n          throw err\n        }\n      }\n\n      if (policy === 'network-only') {\n        return await doFetch()\n      }\n\n      if (!entry.updatedAt) {\n        await doFetch()\n      }\n\n      if (policy === 'cache-first') {\n        return entry.data\n      }\n\n      if (Date.now() - entry.updatedAt > maxAge) {\n        doFetch()\n      }\n\n      return entry.data\n    }\n\n    return cachedLoader\n  }\n  filter<TGenerics extends TDefualtGenerics = TDefualtGenerics>(\n    fn: (record: SimpleCacheRecord<TGenerics>) => any,\n  ): SimpleCacheRecord<TGenerics>[] {\n    return Object.keys(this.records)\n      .filter((key) => fn(this.records[key]!))\n      .map((d) => this.records[d]) as SimpleCacheRecord<TGenerics>[]\n  }\n  find<TGenerics extends TDefualtGenerics = TDefualtGenerics>(\n    fn: (record: SimpleCacheRecord<TGenerics>) => any,\n  ): SimpleCacheRecord<TGenerics> | undefined {\n    return this.filter<TGenerics>(fn)[0]\n  }\n  invalidate<TGenerics extends TDefualtGenerics = TDefualtGenerics>(\n    fn: (record: SimpleCacheRecord<TGenerics>) => any,\n  ) {\n    const records = this.filter(fn)\n    records.forEach((record) => {\n      record.invalid = true\n    })\n  }\n  removeAll() {\n    this.records = {}\n  }\n  remove<TGenerics extends TDefualtGenerics = TDefualtGenerics>(\n    fn: (record: SimpleCacheRecord<TGenerics>) => any,\n  ) {\n    this.filter(fn).forEach((record) => {\n      delete this.records[record.key]\n    })\n  }\n}\n"],"names":["ReactLocationSimpleCache","records","createLoader","loader","opts","maxAge","policy","cachedLoader","match","loaderOptions","key","pathname","_this","updatedAt","ready","entry","Object","assign","doFetch","dispatch","type","data","Date","now","error","filter","fn","keys","this","_this2","map","d","find","invalidate","forEach","record","invalid","removeAll","remove","_this3"],"mappings":";;;;;;;;;;gkBA0BaA,+BAGXC,QAAmC,8BAInCC,aAAA,SACEC,EACAC,kBAMMC,iBAASD,SAAAA,EAAMC,UAAU,EACzBC,iBAASF,SAAAA,EAAME,UAAU,oBAEzBC,8CAAoC,WAAOC,EAAOC,gGAEhDC,QAAMN,GAAAA,EAAMM,IAAMN,EAAKM,IAAIF,GAASA,EAAMG,SAG3CC,EAAKX,QAAQS,KAChBE,EAAKX,QAAQS,GAAO,CAClBA,IAAAA,EACAG,UAAW,EACXC,OAAO,EACPN,MAAAA,IAIEO,EAAQH,EAAKX,QAAQS,GAE3BM,OAAOC,OAAOF,EAAO,CACnBP,MAAAA,EACAC,cAAAA,IAGIS,8CAAU,0GACdT,EAAcU,SAAS,CAAEC,KAAM,8BAEVjB,EAAOK,EAAOC,iBAA3BY,SACNN,EAAMF,UAAYS,KAAKC,MACvBR,EAAMD,OAAQ,EACdC,EAAMM,KAAOA,EACbZ,EAAcU,SAAS,CAAEC,KAAM,UAAWC,KAAAA,sBACnCA,2CAEPZ,EAAcU,SAAS,CAAEC,KAAM,SAAUI,iIAK9B,iBAAXlB,kCACWY,sDAGVH,EAAMF,4CACHK,eAGO,gBAAXZ,4CACKS,EAAMM,qBAGXC,KAAKC,MAAQR,EAAMF,UAAYR,GACjCa,sBAGKH,EAAMM,iHAGRd,KAETkB,OAAA,SACEC,qBAEOV,OAAOW,KAAKC,KAAK3B,SACrBwB,QAAO,SAACf,UAAQgB,EAAGG,EAAK5B,QAAQS,OAChCoB,KAAI,SAACC,UAAMF,EAAK5B,QAAQ8B,SAE7BC,KAAA,SACEN,UAEOE,KAAKH,OAAkBC,GAAI,MAEpCO,WAAA,SACEP,GAEgBE,KAAKH,OAAOC,GACpBQ,SAAQ,SAACC,GACfA,EAAOC,SAAU,QAGrBC,UAAA,gBACOpC,QAAU,MAEjBqC,OAAA,SACEZ,mBAEKD,OAAOC,GAAIQ,SAAQ,SAACC,UAChBI,EAAKtC,QAAQkC,EAAOzB"}